# Crypto AI Trading Tool: BTC/USDT Signal Generator + Auto Trader (Web UI)

import streamlit as st
import pandas as pd
import numpy as np
import ccxt
import datetime
import tensorflow as tf
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import LSTM, Dense, Dropout
from ta.momentum import RSIIndicator, StochasticOscillator
from ta.trend import MACD, EMAIndicator, CCIIndicator
from ta.volatility import BollingerBands
from ta.volume import OnBalanceVolumeIndicator
import os

# Custom indicator: SuperTrend
def calculate_supertrend(df, period=10, multiplier=3):
    hl2 = (df['high'] + df['low']) / 2
    atr = df['high'].rolling(period).max() - df['low'].rolling(period).min()
    atr = atr.rolling(period).mean()
    upperband = hl2 + (multiplier * atr)
    lowerband = hl2 - (multiplier * atr)
    supertrend = [True] * len(df)

    for i in range(1, len(df)):
        if df['close'].iloc[i] > upperband.iloc[i-1]:
            supertrend[i] = True
        elif df['close'].iloc[i] < lowerband.iloc[i-1]:
            supertrend[i] = False
        else:
            supertrend[i] = supertrend[i-1]
            if supertrend[i] and lowerband.iloc[i] < lowerband.iloc[i-1]:
                lowerband.iloc[i] = lowerband.iloc[i-1]
            if not supertrend[i] and upperband.iloc[i] > upperband.iloc[i-1]:
                upperband.iloc[i] = upperband.iloc[i-1]

    df['supertrend'] = pd.Series(supertrend).astype(int)
    return df

# Custom indicator: Williams Fractals
def calculate_fractals(df):
    df['fractal_high'] = df['high'][(df['high'].shift(2) < df['high']) & (df['high'].shift(-2) < df['high'])]
    df['fractal_low'] = df['low'][(df['low'].shift(2) > df['low']) & (df['low'].shift(-2) > df['low'])]
    df['fractal_high'] = df['fractal_high'].fillna(method='ffill')
    df['fractal_low'] = df['fractal_low'].fillna(method='ffill')
    return df

# Binance setup
api_key = os.getenv("BINANCE_API_KEY")
api_secret = os.getenv("BINANCE_API_SECRET")
exchange = ccxt.binance({
    'apiKey': api_key,
    'secret': api_secret,
    'enableRateLimit': True
})

symbol = 'BTC/USDT'
timeframe = '1h'

# Fetch historical data
def fetch_data():
    ohlcv = exchange.fetch_ohlcv(symbol, timeframe, limit=500)
    df = pd.DataFrame(ohlcv, columns=['timestamp', 'open', 'high', 'low', 'close', 'volume'])
    df['timestamp'] = pd.to_datetime(df['timestamp'], unit='ms')
    df.set_index('timestamp', inplace=True)
    return df

# Feature toggles
use_supertrend = st.sidebar.checkbox("Use SuperTrend", value=True)
use_fractals = st.sidebar.checkbox("Use Williams Fractals", value=True)

# Feature engineering
def add_indicators(df):
    df['rsi'] = RSIIndicator(df['close']).rsi()
    df['macd'] = MACD(df['close']).macd()
    df['ema'] = EMAIndicator(df['close']).ema_indicator()
    df['stoch'] = StochasticOscillator(df['high'], df['low'], df['close']).stoch()
    df['cci'] = CCIIndicator(df['high'], df['low'], df['close']).cci()
    bb = BollingerBands(df['close'])
    df['bb_bbm'] = bb.bollinger_mavg()
    df['bb_bbh'] = bb.bollinger_hband()
    df['bb_bbl'] = bb.bollinger_lband()
    df['obv'] = OnBalanceVolumeIndicator(df['close'], df['volume']).on_balance_volume()
    if use_supertrend:
        df = calculate_supertrend(df)
    else:
        df['supertrend'] = 0
    if use_fractals:
        df = calculate_fractals(df)
    else:
        df['fractal_high'] = 0
        df['fractal_low'] = 0
    df.dropna(inplace=True)
    return df

# Prepare data for LSTM
def prepare_data(df):
    df['target'] = df['close'].shift(-1)
    features = ['close', 'rsi', 'macd', 'ema', 'stoch', 'cci', 'bb_bbm', 'bb_bbh', 'bb_bbl', 'obv', 'supertrend', 'fractal_high', 'fractal_low']
    data = df[features].values
    target = df['target'].values

    sequence_length = 20
    X, y = [], []
    for i in range(len(data) - sequence_length):
        X.append(data[i:i+sequence_length])
        y.append(1 if target[i+sequence_length] > data[i+sequence_length-1][0] else 0)

    X, y = np.array(X), np.array(y)
    return X, y

# Build LSTM model
def build_model(input_shape):
    model = Sequential()
    model.add(LSTM(64, return_sequences=True, input_shape=input_shape))
    model.add(Dropout(0.2))
    model.add(LSTM(32))
    model.add(Dropout(0.2))
    model.add(Dense(1, activation='sigmoid'))
    model.compile(optimizer='adam', loss='binary_crossentropy', metrics=['accuracy'])
    return model

# Trading Execution
def place_order(signal):
    balance = exchange.fetch_balance()
    usdt = balance['USDT']['free']
    btc = balance['BTC']['free']

    if signal == 'BUY' and usdt > 10:
        order = exchange.create_market_buy_order(symbol, usdt / df['close'].iloc[-1])
        return f"BUY Order Executed: {order}"
    elif signal == 'SELL' and btc > 0.0002:
        order = exchange.create_market_sell_order(symbol, btc)
        return f"SELL Order Executed: {order}"
    else:
        return "No sufficient balance or HOLD signal."

# Inference
@st.cache_resource
def train_and_predict():
    df = fetch_data()
    df = add_indicators(df)
    X, y = prepare_data(df)
    model = build_model((X.shape[1], X.shape[2]))
    model.fit(X[:-10], y[:-10], epochs=5, batch_size=32, verbose=0)
    pred = model.predict(X[-1:])[0][0]
    signal = 'BUY' if pred > 0.6 else 'SELL' if pred < 0.4 else 'HOLD'
    return df, signal, pred

# UI
st.title("BTC/USDT AI Signal Generator + Auto Trader")
df, signal, confidence = train_and_predict()
st.line_chart(df['close'], height=300)

st.markdown(f"### Signal: **{signal}**")
st.markdown(f"Confidence Score: `{confidence:.2f}`")
st.dataframe(df.tail(10))

# Execute trade if not in paper mode
if st.button("Execute Trade"):
    result = place_order(signal)
    st.success(result)

# Dashboard: Signal history (placeholder for expansion)
st.markdown("---")
st.subheader("Signal Dashboard")
st.write("(To be expanded with signal history logs and performance metrics)")
